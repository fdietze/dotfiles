
" always display statusline
set laststatus=2

" hide mode from last line
set noshowmode

let g:lightline = {
      \ 'colorscheme': 'solarized_dark',
      \ 'active': {
      \   'left': [ [ 'mode' ], [ 'gitbranch', 'syntastic', 'bufferline' ]],
      \   'right': [  ['scrollbar'], [ 'filetype' ] ]
      \ },
      \ 'inactive': {
      \   'left': [ ['filename'] ],
      \   'right': [  ['scrollbar'] ]
      \ },
      \ 'component' : {
      \   'bufferline': '%{bufferline#refresh_status()}%{g:bufferline_status_info.before}%#TabLineSel#%{g:bufferline_status_info.current}%#LightLineLeft_active_1#%{g:bufferline_status_info.after}',
      \ },
      \ 'component_function': {
      \   'gitbranch': 'BarGitBranch',
      \   'filename' : 'BarFilename',
      \   'scrollbar': 'BarScrollbar'
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '▍', 'right': '▐' }
      \ }

function! BarScrollbar()
    return winwidth(0) > 70 ? Scrollbar_Highres(20) : Scrollbar_SingleChar()
endfunction

" augroup AutoSyntastic
"   autocmd!
"   autocmd BufWritePost * call s:syntastic()
" augroup END

function! SyntasticAndStatusUpdate()
  SyntasticCheck
  call lightline#update()
endfunction

" hi def link User1 GuiInactiveFull
" hi def link User2 GuiAlternateActiveFull
" hi def link User3 Cursorlinenr

function! BarGitBranch()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = '⎇  '  " edit here for cool mark
      let _ = fugitive#head()
      let out = strlen(_) ? mark._ : ''
      return winwidth(0) > 70 ? out : ''
    endif
  catch
  endtry
  return ''
endfunction

function! BarModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "*"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! BarReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "[ro]"
  else
    return ""
  endif
endfunction


function! BarFilename()
  return ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != BarReadonly() ? BarReadonly() . ' ' : '') .
       \ ('' != BarModified() ? BarModified() : '')
endfunction

let g:bufferline_echo = 0
let g:bufferline_active_buffer_left = ''
let g:bufferline_active_buffer_right = ''
let g:bufferline_show_bufnr = 0


func! Update_Scrollbar_Highres(charwidth)
    " let res        = 8
    " let blocksl    = [' ','▏','▎','▍','▌','▋','▊','▉']
    " let blocksr    = [' ',' ','▕','▕','▕','▐','▐','▐']
    let res        = 2
    let blocksl    = [' ','▌']
    let blocksr    = [' ','▐']

    let width      = a:charwidth    * res
    let lastline   = (line('$')  - 1) * res
    let bufstart   = (line('w0') - 1) * res
    let bufend     = (line('w$') - 1) * res
    let winheight  = bufend - bufstart " winheight(winnr())*res

    if lastline == 0
        let pagestart  = 0
        let pageheight = width
    else
        let pagestart  = bufstart  * width / lastline
        let pageheight = min([width,winheight * width / lastline + 1])
    endif

    if (pagestart+pageheight) > width " avoids numerical errors
        let pagestart -= pagestart+pageheight-width
    endif

    let before     = pagestart
    let pre        = ((res-(pagestart%res))%res)
    let post       = ((pagestart+pageheight)%res)
    let mid        = pageheight - pre - post
    let after      = (width - pagestart - pageheight)
    let beforeFull = (before - ((res - pre)%res))/res
    let midFull    = mid/res
    let afterFull  = (after-((res-post)%res))/res

    let b:scrollbar_before  = repeat(' ', beforeFull)
    let b:scrollbar_current = (before%res+pre == 0 ? '' : blocksr[pre])
                            \.repeat('█', midFull)
                            \.(post+after%res == 0 ? '' : blocksl[post])
    let b:scrollbar_after   = repeat(' ', afterFull)


    " echo 'pagestart: '.pagestart.', pageheight: '.pageheight.' = '.(pagestart+pageheight).', last: '.lastline
    "             \.' | '.before.': '.beforeFull.'+(['.(before%res).'+'.pre.']+'.(midFull).'+['.post.'+'.(after%res).'])+'.afterFull.' :'.after
    "             \.' | sum:'.(pre+mid+post).', '.(before+pre+post+mid+after).', '.(beforeFull+(before%res)+pre+mid+post+(after%res)+afterFull).' / '.(width)
    "             \.'['.b:scrollbar_before.b:scrollbar_current.b:scrollbar_after.']'

    return ''
endfun

func! Scrollbar_Highres(charwidth)
    call Update_Scrollbar_Highres(a:charwidth)
    return ''.b:scrollbar_before.b:scrollbar_current.b:scrollbar_after
endfun

func! Update_Scrollbar(charwidth)
    let lastline   = (line('$')  - 1)
    let bufstart   = (line('w0') - 1)
    let bufend     = (line('w$') - 1)
    let winheight  = bufend - bufstart " winheight(winnr())*res

    if lastline == 0
        let pagestart  = 0
        let pageheight = a:charwidth
    else
        let pagestart = bufstart * a:charwidth / lastline
        let pageheight = min([a:charwidth,winheight * a:charwidth / lastline + 1])
    endif

    if (pagestart+pageheight) > a:charwidth " avoids numerical errors
        let pagestart -= pagestart+pageheight-a:charwidth
    endif

    let b:scrollbar_before  = repeat(' ', pagestart)
    let b:scrollbar_current = repeat('█', pageheight)
    let b:scrollbar_after   = repeat(' ', a:charwidth - pagestart - pageheight)

    " echo 'start: '.pagestart.', height: '.pageheight.',after: '.(a:charwidth - pagestart - pageheight)
    "             \.'['.b:scrollbar_before.b:scrollbar_current.b:scrollbar_after.']'

    return ''
endfun

func! Scrollbar(charwidth)
    call Update_Scrollbar(a:charwidth)
    return ''.b:scrollbar_before.b:scrollbar_current.b:scrollbar_after
endfun


func! Scrollbar_SingleChar()
    let blocks   = ['█','▇','▆','▅','▄','▃','▂','▁',' ']
    let lines    = line('$')
    let cursor   = line('.')
    let blocklen = len(blocks)-1

    let display  = cursor*blocklen/lines
    " echo 'lines: '.lines.', cursor: '.cursor.', display:'.display
    return blocks[display]
endfun

