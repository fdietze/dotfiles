# dotfile management
DOTFILES_GIT="GIT_DIR=$HOME/projects/dotfiles GIT_WORK_TREE=$HOME"
DOTFILES_TIG="TIGRC_USER=$HOME/.config/tig/config-dotfiles"
alias dt="$DOTFILES_GIT git -c status.showUntrackedFiles=no -c core.excludesfile=$HOME/.gitignore-dotfiles"
alias tigd="$DOTFILES_GIT $DOTFILES_TIG tig"
vd() ( $EDITOR "$HOME/$(dt ls-tree --full-tree --name-only -r HEAD | fzf)"; )


# listing files
alias l='ls -l'
alias la='ls -lA' # only shorthands are mac-compatible
alias lt='ls -ltr' # only shorthands are mac-compatible
alias t='tree -C' # -C is for color=always
alias t2='t -L 2'
alias t3='t -L 3'
alias ta='t -a'
tg() { rg --files "$@" | command tree --fromfile; }


# quickly open common dotfiles
alias vim="\$EDITOR"
alias  va="\$EDITOR ~/.sh_aliases"
alias  vz="\$EDITOR ~/.zshrc"
alias  ve="\$EDITOR ~/.zshenv"
alias  vv="\$EDITOR ~/.vimrc"
alias vvp="\$EDITOR ~/.vimrc_plugins"
alias vvk="\$EDITOR ~/.vimrc_keybindings"
alias vb="\$EDITOR ~/.config/polybar/config"
alias vn="\$EDITOR /etc/nixos/configuration.nix"



# aliases
alias rm='rm -v'
alias ssh='TERM=xterm-256color ssh' # fix colors in some ssh connections
alias rg="rg --hidden --glob '!.git' --ignore-case" # https://github.com/BurntSushi/ripgrep/issues/623
alias hd='hexdump -C'
alias lsblk='lsblk -o NAME,RM,SIZE,FSTYPE,LABEL,MOUNTPOINT,RO,UUID'
alias sys='sudo systemctl'
alias sysu='systemctl --user'
alias hc='herbstclient'
alias watch='watch -c -d'
alias w='watch '
alias vclip='clippaste | vipe | clipcopy' # https://vi.stackexchange.com/questions/21446/how-can-i-edit-the-contents-of-my-clipboard-in-vim
alias chromium='chromium --high-dpi-support=1 --force-device-scale-factor=1.5' # fix highdpi for chromium
alias chromium-no-plugins='chromium --disable-extensions --disable-plugins'
alias qrscan='LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam --raw /dev/video0'
alias gparted='gksudo gparted'
alias startmac='VBoxManage startvm "macOS" --type headless'
alias tclip='tmate display -p "#{tmate_ssh}" | xclip -selection clipboard'  # tmate session token to clipboard
alias tw=timew



# nixos
alias ns="nix-shell --run zsh"
alias nrs="sudo nixos-rebuild switch"
fni() {
  local packages package
  packages=$(nix search "$1" | tr -d '\n' | sed 's/  / /g' | sed s/*/\\n/g | sed 's/^ //g' | grep '\S') &&
  package=$(echo "$packages" | fzf --ansi | cut -f1 -d ' ') &&
  nix-env -iA "$package"
}


# online checking tools
ONLINECMD='ping -c 1 8.8.8.8 -W 5 && ping -c 1 google.com -W 5'
alias online="$ONLINECMD" # -c <retries>  -W <timout>
alias online-wait='until online; do; sleep 3; done; espeak -p 30 "online"; espeak -p 80 "online"; espeak -p 50 "online"'
alias on="w --interval=1 '$ONLINECMD'"



find-git-root() (
  cd "$1"
  GITROOT=$(git rev-parse --show-toplevel 2> /dev/null)
  if [[ $? == 0 ]]; then
    echo "$GITROOT"
  else
    echo "$1"
  fi
)

v() ( # open files with fzf
    cd "$(find-git-root "$PWD")"
    file="$(fzf --query="$(echo $@ | tr ' ' '\ ' )")"
    [[ -n $file ]] && $EDITOR "$file"
)
vr() { vim -c "History $*"; } # open recently used files with vim



sshforward() {
    # usage: sshforward host remoteport [localport]
    REMOTEHOST=$1
    REMOTELOCALPORT=$2
    LOCALPORT=${3:-$2}
    shift 3
    ssh -NL ${LOCALPORT}:localhost:${REMOTELOCALPORT} ${REMOTEHOST} $@
}


parentfolder-withfile() (
  local file=$1
  local DIR=$(pwd)

  while [ -n "$DIR" ] && [ ! -f "$DIR/$file" ]; do
    DIR="${DIR%\/*}"
  done

  if [ -z "$DIR" ]; then
    pwd
  else
    echo "$DIR"
  fi
)

sbt() (
  # look in this parent folders for build.sbt
  # only launch sbt if build.sbt is found
  DIR=$(pwd)

  while [ -n "$DIR" ] && [ ! -f "$DIR/build.sbt" ]; do
    DIR="${DIR%\/*}"
  done

  if [ -z "$DIR" ]; then
    echo "No build.sbt found."
    exit 1
  fi

  [[ "$DIR" == "$PWD" ]] || echo "$(tput setaf 2)Launching sbt in $DIR$(tput sgr0)"

  cd "$DIR"
  exec env sbt $@
)

x() { # open a gui command and close the terminal
    zsh -i -c "$@ &; disown" 
    exit
}


note() { # simple notetaking
    $EDITOR "$(date +"$HOME/notes/%Y-%m-%d-$1.md")"
}


notes() { # browse notes with fzf
    (
        cd "$HOME/notes" || exit
        file="$(rg --files --sort modified | fzf --no-sort --tac --query="$(echo $@ | tr ' ' '\ ' )")"
        [[ -n $file ]] && $EDITOR "$file"
    )
}




# file search
alias vag="search-select-edit"

# file listing/interaction
if [ "$(uname 2> /dev/null)" != "Linux" ]; then
    # for Mac
    alias ls='ls -hFG'
else
  alias ls='ls --group-directories-first --color=always --escape --human-readable --classify'
	if [ -n "${commands[grc]}" ]; then
	    alias ls='grc ls --group-directories-first --color=always --escape --human-readable --classify'
  fi
fi

alias md='mkdir -p'
alias mcp='noglob zmv -C -W'
alias mln='noglob zmv -L -W'
alias mmv='noglob zmv -W'

alias o='mimeo' # Open files using MIME-type and custom user associations
# alias cat='bat --theme=ansi-light'

# change directories
alias cdd='cd ~/downloads'
alias cdp='cd ~/projects '
alias cdt='cd-tmp'
alias cdg='cd-git-root'
p() { cd ~/projects/"$(ls -t ~/projects | fzf --query="$(echo $@ | tr ' ' '\ ' )")";}
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias vm='vim $(git-select-dirty-files)'

alias rcp='rsync --archive --partial --info=progress2 --human-readable'

# git
alias g='git'
alias gs='git st'
alias gu='git up'
alias gp='git p'
alias gpf='git pf'
alias gl='git lg'
alias gla='git lga'
alias gsc='git-select-commit'
alias gdf='git df --no-index'

if [ -n "$ZSH_VERSION" ]; then
    alias -g GSC='$(git-select-commit)'
    alias -g GSCA='$(git-select-commit --all)'
    alias -g GSD='$(git-select-dirty-files)'
fi

# dev
alias m='make'
alias mc='make clean'

# global aliases
if [ -n "$ZSH_VERSION" ]; then
    alias -g G=' | grep -i'
    alias -g H=' | head'
    alias -g T=' | tail'
    alias -g L=' | less'
    alias -g N="\"\$(\ls -tp | grep -v '\/$' | head -1)\""
    alias -g F='"$(fzf)"'
    alias oo='o N'
fi




autocolors() {
    if type sunwait >/dev/null; then 
        if [ $(sunwait poll 50.77N 6.08W) == "DAY" ]
            then ~/bin/theme light $@
            else ~/bin/theme dark $@
        fi
        else ~/bin/theme light $@
    fi
}

airplane() {
    nmcli radio wifi off
    sudo rfkill block all
}

low() {
    # save energy
    # xbacklight -set 10 -time 0
    # keyboardbacklightoff
    touch /tmp/low-power-mode # a marker for other apps to detect if in low-power mode

    low-traffic

    echo "powersave governor..."
    sudo cpupower frequency-set -g powersave
    echo "max-frequency: 2GHz..."
    sudo cpupower frequency-set --max 2GHz

    echo "switching off wifi/bluetooth..."
    airplane
}

low-traffic() {
    echo "stopping network-heavy services..."
    sys stop ipfs > /dev/null 2>&1
    sys stop btsync > /dev/null 2>&1
    sys stop syncthing > /dev/null 2>&1
    sys stop dropbox > /dev/null 2>&1
    sys stop nixos-upgrade.timer > /dev/null 2>&1
    sys stop nixos-upgrade > /dev/null 2>&1
    pkill megasync
}

stayawake() {
    # disable screensaver
    xset s noblank
    xset s off
    xset -dpms
}

toggle-monitor() (
  intern=eDP-1
  extern=HDMI-1

  if xrandr | grep "$extern disconnected"; then
    xrandr --output "$extern" --off --output "$intern" --auto
  else
    xrandr --output "$intern" --off --output "$extern" --auto
  fi
)

display-projector() {
    sysu stop redshift
    # xrandr --output HDMI-1  --auto --primary --output VGA-1 --off --output eDP-1 --off
    xrandr --output HDMI-1  --auto --primary --output eDP-1 --off

    pacmd set-sink-mute 0 0 # unmute
    # xsetroot -solid '#ffffff'

    stayawake
}

reset-screen() {
    sysu start redshift
    # xrandr --output eDP-1  --auto --primary --output VGA-1 --off --output HDMI-1 --off
    xrandr --output eDP-1  --auto --primary --output HDMI-1 --off --output DP-2 --off

    herbstclient reload

    # enable screensaver
    xset s blank
    xset s on
    xset +dpms
}


search-select-edit () {
    results=$(ag --filename --noheading --numbers --column --nobreak --color --hidden -S $@) 
    selected=$(echo -E $results | fzf --ansi --multi --no-sort --tac) 
    [[ -z "$selected" ]] && return 0
    uniquefileswithlines=$(echo -E $selected | tac | sed '$!N; /^\([^:]*\):.*\n\1:.*$/!P; D' | tac | cut -d: -f1-3) 
    eval "vim $(echo -E $uniquefileswithlines | xargs -I'{}' echo -E -n '"{}" ')"
}

try() {
    until zsh -ic "$@"
    do
        echo "failed: $@"
        sleep 1
        echo "trying again..."
    done
}






untilon() {
    until ping -c 1 $1 -W 2; do sleep 1; done;
}

# vim: ft=sh
