# launch helpers
alias qrscan='LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam --raw /dev/video0'
alias photoshop='wine ~/.wine/drive_c/Program\ Files\ \(x86\)/Adobe/Photoshop\ 7.0/Photoshop.exe'
alias gparted='gksudo gparted'
alias suspend='systemctl suspend'
alias start='cd ~/projects/wust2; ./start'

# https://github.com/chenkelmann/neo2-awt-hack
# wget https://github.com/chenkelmann/neo2-awt-hack/blob/master/releases/neo2-awt-hack-0.4-java8oracle.jar\?raw\=true -O ~/local/neo2-awt-hack-0.4-java8oracle.jar
# alias idea-community='_JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=lcd -Xbootclasspath/p:$HOME/local/neo2-awt-hack-0.4-java8oracle.jar" idea-community'

alias start='./start'
wu() {
    cd ~/projects/wust2
    if [ -z "$(git status --porcelain)" ]; then 
        # Working directory clean
        git pull
    fi 
    ./start nsbt
}


# fix highdpi for chromium
alias chromium='chromium --high-dpi-support=1 --force-device-scale-factor=1.5'
alias chromium-no-plugins='chromium --disable-extensions --disable-plugins'

alias vim='nvim'

# dotfile management
DOTFILES_GIT='GIT_DIR=$HOME/projects/dotfiles GIT_WORK_TREE=$HOME'
DOTFILES_PRIVATE_GIT='GIT_DIR=$HOME/projects/dotfiles-private GIT_WORK_TREE=$HOME'
DOTFILES_TIG='TIGRC_USER=$HOME/.config/tig/config-dotfiles'
alias     d="$DOTFILES_GIT         git -c core.excludesfile=~/.gitignore-dotfiles"
alias    dp="$DOTFILES_PRIVATE_GIT git -c core.excludesfile=~/.gitignore-dotfiles-private"
# which yadm > /dev/null && alias     d='yadm --yadm-repo $HOME/projects/dotfiles         -c core.excludesfile=~/.gitignore-dotfiles'
# which yadm > /dev/null && alias    dp='yadm --yadm-repo $HOME/projects/dotfiles-private -c core.excludesfile=~/.gitignore-dotfiles-private'
alias  tigd="$DOTFILES_GIT $DOTFILES_TIG         tig"
alias tigdp="$DOTFILES_PRIVATE_GIT $DOTFILES_TIG tig"
vd() {(cd; eval $DOTFILES_GIT vim -c GitFiles);}
alias vim="nvim"
alias  va="vim ~/.sh_aliases"
alias  vz="vim ~/.zshrc"
alias  vp="vim ~/.profile"
alias  vv="vim ~/.vimrc"
alias vvp="vim ~/.vimrc_plugins"
alias vvc="vim ~/.vimrc_custom"
alias vvk="vim ~/.vimrc_keybindings"
alias vvs="vim ~/.vimrc_statusline"
alias vx="vim ~/.xmonad/xmonad.hs"
alias vb="vim ~/.config/polybar/config"
alias vn="vim /etc/nixos/configuration.nix"

# unsorted / general
alias ssh='TERM=xterm-256color ssh'
sshforward() {
    # usage: sshforward host remoteport [localport]
    REMOTEHOST=$1
    REMOTELOCALPORT=$2
    LOCALPORT=${3:-$2}
    ssh -NL ${LOCALPORT}:localhost:${REMOTELOCALPORT} ${REMOTEHOST}
}
dockerhost() {
    # export DOCKER_HOST=localhost
    sshforward $1 2375 &
}

try() {
    until zsh -ic "$@"
    do
        echo "$@"
        sleep 1
    done
}

alias hc='herbstclient'
alias watch='watch -c -d'
alias w='watch '
ONLINECMD='ping -c 1 8.8.8.8 -W 5 && ping -c 1 google.com -W 5'
alias online="$ONLINECMD" # -c <retries>  -W <timout>
alias online-wait='until online; do; sleep 3; done; espeak -p 30 "online"; espeak -p 80 "online"; espeak -p 50 "online"'
alias on="w --interval=1 '$ONLINECMD'"
alias hd='hexdump -C'
alias fucking='sudo'
alias speakerup='amixer -c 0 sset Speaker 100%'
alias defrag='sudo btrfs filesystem defragment -r -v -f -clzo'
alias iotop='sudo iotop'
alias keepass='secret-tool lookup keepass password | keepassxc $HOME/.keepass/passwords.kdbx --pw-stdin'
alias kp='keepass-dmenu --database ~/.keepass/passwords.kdbx --password "$(secret-tool lookup keepass password)" --fn "Droid Sans Mono-8" --nb "#FFFFFF" --nf "#000000" --sb "#00D7FF" --sf "#101010" > /dev/null'
alias cups='sudo systemctl start cups-browsed.service'
alias kodi='AE_SINK=ALSA kodi'
alias rm='rm -v'
alias lsblk='lsblk -o NAME,RM,SIZE,FSTYPE,LABEL,MOUNTPOINT,RO,UUID'
alias sys='sudo systemctl'
alias sysu='systemctl --user'
addusertogroup() { sudo usermod -a -G ${2-$USER} $1; }
movie() {
    title=$@
    $BROWSER --new-window "https://www.werstreamt.es/filme-serien/?q=$title" &
    # movie-godzilla $title
}

movie-godzilla() {
    title=$@
    selection=$(ssh neptun bin/fuzzysearch movies $title | fzf)
    while read -r file; do
        echo $file
        scp neptun:"'$file'" ~/videos
    done <<< "$selection"
}

untilon() {
    until ping -c 1 $1 -W 2; do sleep 1; done;
}

alias localfffon='ssh kiwi sudo etherwake -i eth0 1c:1b:0d:9d:e2:1a && ssh kiwi "until ping -q -c 1 192.168.123.155 -W 2; do sleep 1; done"'
alias fffon='ssh remotekiwi sudo etherwake -i eth0 1c:1b:0d:9d:e2:1a && ssh remotekiwi "until ping -q -c 1 192.168.123.155 -W 2; do sleep 1; done"'
alias fffoff='ssh rfff sudo poweroff'
alias fffdev='fffon; cd ~/projects/wust2; REMOTEHOST=rfff ./remotedev.sh'

# wifi with networkmanager
alias won='nmcli radio wifi on; wscan'
alias woff='nmcli radio wifi off'
alias wscan='nmcli dev wifi rescan > /dev/null 2>&1; true'
alias wlist='nmcli dev wifi list'
alias wcon='nmcli --ask dev wifi connect'


alias tw='timew'


# nixos
alias ns="nix-shell --run zsh"
alias nrs="sudo nixos-rebuild switch"

# vim
note() {
    vim $(date +"%Y-%m-%d-$1.md")
}

v() {
    (
        cd-git-root > /dev/null
        file="$(fzf --query="$(echo $@ | tr ' ' '\ ' )")"
        [[ -n $file ]] && nvim "$file"
    );
}
vr() { vim -c "History $*"; }

x() {
    zsh -i -c "$@ &; disown" 
    exit
}

# file search
alias lo='locate -i'
alias ag='ag --follow --smart-case'
alias f='ag -g'
alias fa='find . | ag --smart-case'
alias vag="search-select-edit"
alias conflicts="vag ======="
s() {
    # interactively select a line from stdin and execute command
    # example usage: find /var/log/Xorg* | s less
    # if no stdin is given, match on all files in current dir
    fzf | while read -r line; do $@ "$line"; done
}

# file listing/interaction
if [ "$(uname 2> /dev/null)" != "Linux" ]; then
    # for Mac
    alias ls='ls -hFG'
else
	if [ -n "${commands[grc]}" ]; then
	    alias ls='grc ls --group-directories-first --color=always --escape --human-readable --classify'
	else
	    alias ls='ls --group-directories-first --color=always --escape --human-readable --classify'
	fi
fi

alias lt='ls -ltr' # only shorthands are mac-compatible
alias la='ls -lA' # only shorthands are mac-compatible
alias l='ls -l'
alias t='tree -C' # -C is for color=always
alias t2='tree -L 2 -C' # -C is for color=always
alias t3='tree -L 3 -C' # -C is for color=always
alias ta='tree -a'
alias md='mkdir -p'
alias mdcd='mkdir-cd'
alias mvi='interactive-mv'
alias mcp='noglob zmv -C -W'
alias mln='noglob zmv -L -W'
alias mmv='noglob zmv -W'
alias o='mimeo' # Open files using MIME-type and custom user associations

# change directories
alias cdd='cd ~/downloads'
alias cdp='cd ~/projects '
alias cd.='cd ~/projects/dotfiles'
alias cdt='cd-tmp'
alias cdg='cd-git-root'
p() { cd ~/projects/"$(ls -t ~/projects | fzf --query="$(echo $@ | tr ' ' '\ ' )")";}
alias pp='cd ~/projects/$(ls -t ~/projects | head -1)'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias vm='vim $(git-select-dirty-files)'

alias rcp='rsync --archive --partial --info=progress2 --human-readable'

# start X
alias sx='startx'
alias xkodi='/usr/bin/xinit /usr/bin/dbus-launch --exit-with-session /usr/bin/kodi-standalone -- :0 -nolisten tcp vt1'

# git
alias g='git'
alias gs='git st'
alias gu='git up'
alias gp='git p'
alias gpf='git pf'
alias gl='git lg'
alias gla='git lga'
alias gsc='git-select-commit'
alias gdf='git df --no-index'
alias onstage='git-onstage'
# alias gclp='github-clone'
if [ -n "$ZSH_VERSION" ]; then
    alias -g GSC='$(git-select-commit)'
    alias -g GSCA='$(git-select-commit --all)'
    alias -g GSD='$(git-select-dirty-files)'
fi

# dotfiles git
alias ds='d status'
alias dps='dp status'

# dev
alias m='make'
alias mc='make clean'
alias scala='scala -Dscala.color -deprecation -unchecked -explaintypes -language:_'
alias jsb='underscore print --color --outfmt json' # beautify json, package: npm -g install underscore-cli
# alias nquery='neo4j-query'
# alias nclear='neo4j-clear'
# alias nall='neo4j-all'
alias cg='cargo'

# docker
docker-aliases() {
    alias d='docker'
    alias dm='docker-machine'
    alias dc='docker-compose'
}

# pipes
if [ -n "$ZSH_VERSION" ]; then
    alias -g G=' | grep -i'
    alias -g GV=' | grep -iv'
    alias -g H=' | head'
    alias -g T=' | tail'
    alias -g L=' | less'
    alias -g X=' | xargs -I{}'
    alias -g C=' | xclip'
    alias -g N="\"\$(\ls -tp | grep -v '\/$' | head -1)\""
    alias -g F='"$(fzf)"'
    alias oo='o N'
fi

cgw() {
    cargo $1
    cargo watch $1
}

sbt() { (

    # TODO: search tree upwards for build.sbt
    if [ ! -f build.sbt ]; then
        cd-git-root
    fi
    env sbt $@
    )
}

alias sbt1="sbt -sbt-version 1.1.1"
alias sbt0="sbt -sbt-version 0.13.17"

nstart() {
    hc use_index 7
    (sleep 1; hc use_previous) &
    termite -e "$HOME/local/neo4j/bin/neo4j console"
}

# other
autocolors() {
    if type sunwait >/dev/null; then 
        if [ $(sunwait poll 50.77N 6.08W) == "DAY" ]
            then ~/bin/theme light $@
            else ~/bin/theme dark $@
        fi
        else ~/bin/theme light $@
    fi
}

low() {
    # save energy
    # xbacklight -set 10 -time 0
    # keyboardbacklightoff
    touch /tmp/low-power-mode # a marker for other apps to detect if in low-power mode

    low-traffic

    echo "powersave governor..."
    sudo cpupower frequency-set -g powersave
    echo "max-frequency: 2GHz..."
    sudo cpupower frequency-set --max 2GHz

    echo "switching off wifi/bluetooth..."
    nmcli radio wifi off
    sudo rfkill block all
}

low-traffic() {
    echo "stopping network-heavy services..."
    sys stop ipfs > /dev/null 2>&1
    sys stop btsync > /dev/null 2>&1
    sys stop syncthing > /dev/null 2>&1
    sys stop dropbox > /dev/null 2>&1
    sys stop nixos-upgrade.timer > /dev/null 2>&1
    sys stop nixos-upgrade > /dev/null 2>&1
}

high() {
    xbacklight -set 100

    systemctl --user start btsync
    systemctl --user start syncthing
}

stayawake() {
    # disable screensaver
    xset s noblank
    xset s off
    xset -dpms
}

movietime() {
    sysu stop redshift
    # xrandr --output HDMI-1  --auto --primary --output VGA-1 --off --output eDP-1 --off
    xrandr --output HDMI1  --auto --primary --output VGA1 --off --output eDP1 --off
    xmonad --restart

    pacmd set-sink-mute 0 0 # unmute
    xsetroot -solid '#ffffff'

    stayawake
}

reset-screen() {
    sysu start redshift
    # xrandr --output eDP-1  --auto --primary --output VGA-1 --off --output HDMI-1 --off
    xrandr --output eDP1  --auto --primary --output VGA1 --off --output HDMI1 --off
    xmonad --restart

    # enable screensaver
    xset s blank
    xset s on
    xset +dpms

    sleep 3
    rm -f ~/.colors
    autocolors
}

# vim: ft=sh
