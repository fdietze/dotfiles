" using plugin manager vim-plug
" auto-install if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  !mkdir -p ~/.vim/autoload
  !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')


""""""""""""""""""""""""""""""""""""""""
" non-intrusive plugins which work without configuration

" defaults everyone can agree on
Plug 'tpope/vim-sensible'

" Start screen with recently opened files
Plug 'mhinz/vim-startify'

" enable dot-command for Plugs
Plug 'tpope/vim-repeat'

" enlarge focused window a bit
Plug 'roman/golden-ratio'

" VCS change info on the left
Plug 'mhinz/vim-signify'

" matches not only parantheses, but also HTML-Tags and more
Plug 'edsono/vim-matchit'

" fuzzy autocompletion, eclim
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }



""""""""""""""""""""""""""""""""""""""""
" helpful tools providing new shortcuts

" commenting
Plug 'tpope/vim-commentary'

" surround text with quotes, parantheses, ...
Plug 'tpope/vim-surround'

" ctrl+A/X on dates and time
Plug 'tpope/vim-speeddating'

" sublime-like multiple cursors
Plug 'terryma/vim-multiple-cursors'

" expand selections
Plug 'terryma/vim-expand-region'

" TODO: adjust for NEO
Plug 'tpope/vim-unimpaired'

" snippet engine
Plug 'SirVer/ultisnips'

" Snippets for the snippet engine
Plug 'honza/vim-snippets'


""""""""""""""""""""""""""""""""""""""""
" helpful tools providing functions and commands
" which need to be called/activated/mapped explicitly

" git support
Plug 'tpope/vim-fugitive'
" Plug 'gregsexton/gitv'
" Plug 'airblade/vim-gitgutter'

" align text
Plug 'godlygeek/tabular'
" TODO: check out Plug 'junegunn/vim-easy-align'

" unix commands
Plug 'tpope/vim-eunuch'

" show 'Match x of y' when searching
" Plug 'henrik/vim-indexed-search'

" highlight all matches in incremental search
" (conflicts with vim-indexed-search)
Plug 'haya14busa/incsearch.vim'

" file browser
" Plug 'scrooloose/nerdtree'

" distraction-free writing
Plug 'junegunn/goyo.vim'

" Toggle fullscreen for one window
Plug 'ZoomWin'

" redraw some intermediate steps when using PageUp/Down
" https://stackoverflow.com/questions/4064651/what-is-the-best-way-to-do-smooth-scrolling-in-vim
Plug 'terryma/vim-smooth-scroll'

" identify highlighting group under cursor
Plug 'gerw/vim-HiLinkTrace'

" color parantheses depending on their depth
" Plug 'luochen1990/rainbow'

" HEX-Editor in vim
Plug 'fidian/hexmode'

" reformat source code
Plug 'Chiel92/vim-autoformat'


""""""""""""""""""""""""""""""""""""""""
" file type plugins

" Scala programming language
Plug 'derekwyatt/vim-scala'

" decompile java .class files on the fly
Plug 'vim-scripts/JavaDecompiler.vim'

" Lots of filetypes
" Plug 'sheerun/vim-polyglot'

" play web framework
Plug 'gre/play2vim'

" fish shell
" Plug 'dag/vim-fish'

" HTML
Plug 'othree/html5.vim'

" colors in formats like css
" Plug 'gorodinskiy/vim-coloresque'

" Rust programming language by Mozilla
Plug 'wting/rust.vim'

" LaTeX
Plug 'LaTeX-Box-Team/LaTeX-Box'





""""""""""""""""""""""""""""""""""""""""
" statusline

Plug 'itchyny/lightline.vim'
Plug 'bling/vim-bufferline'



""""""""""""""""""""""""""""""""""""""""
" colorschemes

Plug 'chriskempson/base16-vim'
" Plug 'godlygeek/csapprox'
" Plug 'vim-scripts/guicolorscheme.vim'
" Plug 'nanotech/jellybeans.vim'
" Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
" Plug 'fdietze/goodday.vim'
" Plug 'tomasr/molokai'
" Plug 'sickill/vim-monokai'
" Plug 'noahfrederick/vim-noctu'
" Plug 'noahfrederick/vim-hemisu'


""""""""""""""""""""""""""""""""""""""""
" experimental

" draw a sublime like minimap
" Plug 'severin-lemaignan/vim-minimap'

" restrict repetitive pressing of movement keys (especially arrows)
" Plug 'takac/vim-hardtime'

" auto completion for the Rust language
" Plug 'ebfe/vim-racer'

" automatically-close-brackets-magic
" Plug 'Raimondi/delimitMate'

" most recently used files and dirs
" Plug 'Shougo/neomru.vim'

" Interactive command execution
" Plug 'Shougo/vimproc.vim'

" fuzzy file finding
" Plug 'Shougo/unite.vim'
" Plug 'wincent/command-t', { 'do': 'cd ruby/command-t; ruby extconf.rb; make'}
Plug 'kien/ctrlp.vim'
" TODO: fzf

" Collaborative Editing
" Plug 'FredKSchott/CoVim'
" Plug 'emgram769/vim-multiuser'

" graphical editor for colorschemes
" Plug 'vim-scripts/ColorSchemeEditor'

" TODO: Plug 'nathanaelkane/vim-indent-guides'
" TODO: syntastic
" TODO: Plug 'vim-scripts/ShowMarks'
" TODO: Plug 'ervandew/supertab'
"TODO: Plug 'scrooloose/syntastic'

Plug 'vim-scripts/LanguageTool'

call plug#end()


""""""""""""""""""""""""""""""""
" plugin configuration


" Colorschemes
let base16colorspace=256  " Access colors present in 256 colorspace
let g:rehash256 = 1 " molokai


" YouCompleteMe
let g:ycm_auto_trigger = 1
let g:ycm_min_num_of_chars_for_completion = 5
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_key_list_select_completion = ['<TAB>']


" dont display detail window about current completion
" set completeopt=menuone,longest
" let g:ycm_autoclose_preview_window_after_insertion = 1


" Eclim
" let g:EclimCompletionMethod = 'omnifunc'
" let g:EclimScalaSearchSingleResult = 'edit'
" let g:EclimMakeLCD = 0


" restore-vim
" let g:skipview_files = ['*\.vim']


" DelimitMate
" let delimitMate_expand_cr = 1
" let delimitMate_balance_matchpairs = 1

" Unite
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" call unite#custom#source('file_rec', 'white_globs', ['*.scala','*.conf','*.js','*.sbt'])
" call unite#custom#source('file_rec', 'ignore_globs', ['target/'])

" CommandT
" let g:CommandTFileScanner = 'git'
" let g:CommandTCancelMap=['<Esc>', '<C-c>', '<Backspace>']
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_reuse_window = 'startify'

" Use ag for search
" if executable('ag')
"   let g:unite_source_grep_command = 'ag'
"   let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"   let g:unite_source_grep_recursive_opt = ''
"   let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'
" endif


" Signify
let g:signify_sign_add               = '+'
let g:signify_sign_change            = '⌇' " '︴⌇⌇┇
let g:signify_sign_delete            = '✕'
let g:signify_sign_delete_first_line = '⌅'


" Languagetool
let g:languagetool_jar=$HOME."/local/LanguageTool-2.6/languagetool-commandline.jar"

" Hardtime
" let g:hardtime_allow_different_key = 1
" let g:hardtime_maxcount = 5
" let g:hardtime_default_on = 1
" let g:list_of_normal_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>", "x"]
" let g:list_of_visual_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
" let g:list_of_insert_keys = ["<LEFT>", "<RIGHT>", "<Del>", "<Backspace>"]

" racer
" set hidden
" let g:racer_cmd = "racer"
" let $RUST_SRC_PATH="/home/felix/projects/rust/src"


" rainbow
" let g:rainbow_active = 1


" ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"
