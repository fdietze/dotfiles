" using plugin manager vim-plug
" auto-install if not found
if empty(glob('~/.vim/autoload/plug.vim'))
    !mkdir -p ~/.vim/autoload
    !curl -fLo ~/.vim/autoload/plug.vim
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')


""""""""""""""""""""""""""""""""""""""""
" non-intrusive plugins which work without configuration

" defaults everyone can agree on
Plug 'tpope/vim-sensible'

" Start screen with recently opened files
Plug 'mhinz/vim-startify'

" enable dot-command for Plugs
Plug 'tpope/vim-repeat'

" enlarge focused window a bit
" Plug 'roman/golden-ratio'
Plug 'zhaocai/GoldenView.Vim'

" VCS change info per line
Plug 'airblade/vim-gitgutter' " only git
" Plug 'mhinz/vim-signify' " git, mercurial, darcs, bazaar, subversion, cvs, rcs, fossil, accurev, perforce

" matches not only parantheses, but also HTML-Tags and more
Plug 'edsono/vim-matchit'

" fuzzy autocompletion, eclim
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }

" display and navigate marks
Plug 'kshenoy/vim-signature'

" show 'Match x of y' when searching
" Plug 'henrik/vim-indexed-search' " conflicts with incsearch

" highlight all matches in incremental search
" (conflicts with vim-indexed-search)
Plug 'haya14busa/incsearch.vim'



""""""""""""""""""""""""""""""""""""""""
" helpful tools providing new shortcuts

" commenting
Plug 'tpope/vim-commentary'

" surround text with quotes, parantheses, ...
Plug 'tpope/vim-surround'

" ctrl+A/X on dates and time
Plug 'tpope/vim-speeddating'

" sublime-like multiple cursors
Plug 'terryma/vim-multiple-cursors'

" snippets
Plug 'SirVer/ultisnips' " snippet engine
Plug 'honza/vim-snippets' " Snippets for the snippet engine

" more text objects
Plug 'kana/vim-textobj-user' " framework for custom text objects
Plug 'kana/vim-textobj-indent' "ai ii

" toggle true/false etc
Plug 'AndrewRadev/switch.vim'



""""""""""""""""""""""""""""""""""""""""
" helpful tools providing functions and commands
" which need to be called/activated/mapped explicitly

" fuzzy file finding
Plug 'kien/ctrlp.vim'
" TODO: fzf ?

" git support
Plug 'tpope/vim-fugitive'
" Plug 'gregsexton/gitv'

" align text
Plug 'godlygeek/tabular'
" TODO: check out Plug 'junegunn/vim-easy-align'

" unix commands
Plug 'tpope/vim-eunuch'

" distraction-free writing
Plug 'junegunn/goyo.vim'

" Toggle fullscreen for one window
" Plug 'ZoomWin'

" redraw some intermediate steps when using PageUp/Down
" https://stackoverflow.com/questions/4064651/what-is-the-best-way-to-do-smooth-scrolling-in-vim
Plug 'terryma/vim-smooth-scroll'

" identify highlighting group under cursor
Plug 'gerw/vim-HiLinkTrace'

" color parantheses depending on their depth
" Plug 'luochen1990/rainbow'

" HEX-Editor in vim
Plug 'fidian/hexmode'

" reformat source code
Plug 'Chiel92/vim-autoformat'

" close all buffers except current one
Plug 'vim-scripts/BufOnly.vim'

" show undo tree
Plug 'mbbill/undotree'





""""""""""""""""""""""""""""""""""""""""
" file type plugins

" Scala programming language
Plug 'derekwyatt/vim-scala'

" decompile java .class files on the fly
Plug 'vim-scripts/JavaDecompiler.vim'

" Lots of filetypes
" Plug 'sheerun/vim-polyglot'

" play web framework
Plug 'gre/play2vim'

" fish shell
" Plug 'dag/vim-fish'

" HTML
Plug 'othree/html5.vim'

" New JavaScript Standard Ecmascript 6
" Plug 'isRuslan/vim-es6'
Plug 'othree/yajs.vim'

" colors in formats like css
" Plug 'gorodinskiy/vim-coloresque' " Conflicts with vim-scala: word movements
" jump over dots, outdated repository...

" Rust programming language by Mozilla
Plug 'wting/rust.vim'

" LaTeX
Plug 'LaTeX-Box-Team/LaTeX-Box'




""""""""""""""""""""""""""""""""""""""""
" statusline

Plug 'itchyny/lightline.vim'
Plug 'bling/vim-bufferline'



""""""""""""""""""""""""""""""""""""""""
" colorschemes

Plug 'chriskempson/base16-vim'
" Plug 'godlygeek/csapprox'
" Plug 'vim-scripts/guicolorscheme.vim'
" Plug 'nanotech/jellybeans.vim'
" Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
" Plug 'fdietze/goodday.vim'
" Plug 'tomasr/molokai'
" Plug 'sickill/vim-monokai'
" Plug 'noahfrederick/vim-noctu'
" Plug 'noahfrederick/vim-hemisu'


""""""""""""""""""""""""""""""""""""""""
" experimental

Plug 'scrooloose/syntastic'

Plug 'vim-scripts/LanguageTool'

" draw a sublime like minimap
" Plug 'severin-lemaignan/vim-minimap'

" auto completion for the Rust language
" Plug 'ebfe/vim-racer'

" automatically-close-brackets-magic
" Plug 'Raimondi/delimitMate'

" Interactive command execution
" Plug 'Shougo/vimproc.vim'

" Collaborative Editing
" Plug 'FredKSchott/CoVim'
" Plug 'emgram769/vim-multiuser'

" graphical editor for colorschemes
" Plug 'vim-scripts/ColorSchemeEditor'

" TODO: Plug 'nathanaelkane/vim-indent-guides'
" TODO: Plug 'ervandew/supertab'


call plug#end()


""""""""""""""""""""""""""""""""
" plugin configuration


" Colorschemes
let base16colorspace=256  " Access colors present in 256 colorspace
let g:rehash256 = 1 " molokai


" YouCompleteMe
let g:ycm_auto_trigger = 1
let g:ycm_min_num_of_chars_for_completion = 5
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_key_list_select_completion = ['<TAB>']

" dont display detail window about current completion
" set completeopt=menuone,longest
" let g:ycm_autoclose_preview_window_after_insertion = 1


" Eclim
" let g:EclimCompletionMethod = 'omnifunc'
" let g:EclimScalaSearchSingleResult = 'edit'
" let g:EclimMakeLCD = 0


" CtrlP fuzzy file finding
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_reuse_window = 'startify'

" gitgutter and signify
" let g:gitgutter_diff_args = '--ignore-space-at-eol --ignore-space-change --ignore-all-space' " ignore whitespace in diff
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '⌇'
let g:gitgutter_sign_removed = '✕'
let g:gitgutter_sign_removed_first_line = '⌅'
let g:gitgutter_sign_modified_removed = '⌇✕'
let g:signify_sign_add               = '+'
let g:signify_sign_change            = '⌇' " '︴⌇⌇┇
let g:signify_sign_delete            = '✕'
let g:signify_sign_delete_first_line = '⌅'

" Languagetool
let g:languagetool_jar=$HOME."/local/LanguageTool-2.6/languagetool-commandline.jar"

" racer
" set hidden
" let g:racer_cmd = "racer"
" let $RUST_SRC_PATH="/home/felix/projects/rust/src"

" ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"


" Syntastic
let g:syntastic_enable_signs  = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0

" styntastic java stuff
let g:syntastic_java_checkers = ['javac', 'checkstyle']
let g:syntastic_java_checkstyle_classpath = '/usr/share/java/checkstyle-5.7.jar'
let g:syntastic_java_checkstyle_conf = '/usr/share/checkstyle/sun_checks.xml'

" syntastic javascript
let g:syntastic_javascript_checkers=['jshint'] " , 'eslint', 'flow']


" switch.vim
let g:switch_custom_definitions =
    \ [
    \   ['on', 'off'],
    \   ['==', '!='],
    \   ['_', '-'],
    \   [' < ', ' > '],
    \   ['<=', '>='],
    \   [' + ', ' - '],
    \   ['-=', '+='],
    \   ['and', 'or'],
    \   ['if', 'unless'],
    \   ['YES', 'NO'],
    \   ['yes', 'no'],
    \   ['first', 'last'],
    \   ['else', 'else if'],
    \   ['max', 'min'],
    \   ['px', '%', 'em'],
    \   ['left', 'right'],
    \   ['top', 'bottom'],
    \   ['margin', 'padding'],
    \   ['height', 'width'],
    \   ['absolute', 'relative'],
    \   ['horizontal', 'vertical'],
    \   ['show', 'hide'],
    \   ['visible', 'hidden'],
    \   ['add', 'remove'],
    \   ['up', 'down'],
    \   ['before', 'after'],
    \   ['slow', 'fast'],
    \   ['small', 'large'],
    \   ['even', 'odd'],
    \   ['inside', 'outside'],
    \   {'"\([^"]*\)"': '''\1''', '''\([^'']*\)''': '"\1"'},
    \   {
    \     '\<\(\l\)\(\l\+\(\u\l\+\)\+\)\>': '\=toupper(submatch(1)) . submatch(2)',
    \     '\<\(\u\l\+\)\(\u\l\+\)\+\>': "\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))",
    \     '\<\(\l\+\)\(_\l\+\)\+\>': '\U\0',
    \     '\<\(\u\+\)\(_\u\+\)\+\>': "\\=tolower(substitute(submatch(0), '_', '-', 'g'))",
    \     '\<\(\l\+\)\(-\l\+\)\+\>': "\\=substitute(submatch(0), '-\\(\\l\\)', '\\u\\1', 'g')",
    \   }
    \ ]
" \   {'\([^-0-9]\)\(\d\+\)': '\1-\2', '-\(\d\+\)': '\1'},
" \   {'+\(.\+\)': '-\1', '-\(.\+\)': '+\1'},

