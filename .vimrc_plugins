""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" using plugin manager vim-plug.
" auto-install if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" non-intrusive plugins which work without configuration
Plug 'tpope/vim-sensible'     " defaults everyone can agree on
Plug 'tpope/vim-repeat'       " enable dot-command for Plugins
Plug 'benjifisher/matchit.zip'     " matches not only parantheses, but also HTML-Tags and more
Plug 'bogado/file-line' " open files at line with filename:32
Plug 'airblade/vim-rooter' " cd to project root
Plug 'airblade/vim-gitgutter' " VCS change info per line (only git)
Plug 'zirrostig/vim-smart-swap' " handle vim swap files, delete older and identical swap files



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" helpful tools providing new bindings
Plug 'tpope/vim-commentary' " commenting
Plug 'terryma/vim-multiple-cursors' " sublime-like multiple cursors
Plug 'tpope/vim-surround' " surround text with quotes, parantheses, ...
Plug 'tpope/vim-speeddating' " ctrl+A/X on dates and time
Plug 'AndrewRadev/switch.vim' " toggle true/false etc
" Plug 'vim-scripts/ingo-library' | Plug 'vim-scripts/QuickFixCurrentNumber' " next quickfix location from current cursor position




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" text objects
Plug 'kana/vim-textobj-user' " framework for custom text objects
Plug 'kana/vim-textobj-indent'         " i
Plug 'whatyouhide/vim-textobj-xmlattr' " x
" Plug 'glts/vim-textobj-comment'        " c
" Plug 'kana/vim-textobj-function'       " f
" Plug 'kana/vim-textobj-entire'         " e
Plug 'PeterRincker/vim-argumentative'  " text object ',' / also provides argument movements with >, ],



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" helpful tools providing functions and commands
" which need to be called/activated/mapped explicitly
Plug 'tpope/vim-fugitive' " git support
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-eunuch' " unix commands
Plug 'lambdalisue/suda.vim' " temporary fix for eunch not working in neovim https://github.com/neovim/neovim/issues/1716
Plug 'junegunn/goyo.vim' " distraction-free writing
Plug 'terryma/vim-smooth-scroll' " redraw some intermediate steps when using PageUp/Down
" Plug 'luochen1990/rainbow' " color parantheses depending on their depth
" Plug 'fidian/hexmode' " HEX-Editor in vim
Plug 'Chiel92/vim-autoformat' " reformat source code
Plug 'vim-scripts/BufOnly.vim' " close all buffers except current one
Plug 'mbbill/undotree', {'on': ['UndotreeShow', 'UndotreeToggle']} " show undo tree
Plug 'junegunn/fzf.vim', { 'do': { -> fzf#install() } } " fuzzy selector
Plug 'junegunn/fzf' " fuzzy selector
Plug 'zirrostig/vim-schlepp' " Move selections / lines




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file type plugins
" Plug 'sheerun/vim-polyglot' " Lots of filetypes
Plug 'keith/swift.vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'xolox/vim-easytags', {'on': 'Tags'} | Plug 'xolox/vim-misc', {'on': 'Tags'}
Plug 'derekwyatt/vim-scala', {'for': 'scala'} " Scala programming language
" Plug 'othree/html5.vim', {'for': 'html'} " HTML
" Plug 'Valloric/MatchTagAlways', {'for': 'html'} " Highlight matching/surrounding html tags
Plug 'othree/yajs.vim', {'for': 'javascript'} " New JavaScript Standard Ecmascript 6
Plug 'othree/javascript-libraries-syntax.vim', {'for': 'javascript'}
Plug 'dart-lang/dart-vim-plugin', {'for': 'dart'}
Plug 'udalov/kotlin-vim'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'neo4j-contrib/cypher-vim-syntax', {'for' : 'cypher'} " Neo4j Cypher query language
" Plug 'vim-scripts/JavaDecompiler.vim' " decompile java .class files on the fly
Plug 'rust-lang/rust.vim', {'for': 'rust'} " Rust programming language by Mozilla
Plug 'zah/nim.vim', {'for': 'nim'}
Plug 'cespare/vim-toml', {'for': 'toml'} " TOML (used for Rust project configuration)
Plug 'LaTeX-Box-Team/LaTeX-Box', {'for': 'tex'} " LaTeX
Plug 'vim-scripts/gnuplot.vim', {'for': 'gnuplot'}
Plug 'shmup/vim-sql-syntax'
Plug 'LnL7/vim-nix' " nixos syntax
Plug 'rhysd/vim-gfm-syntax' " Github flavoured markdown with embedded language support
Plug 'chrisbra/Colorizer' " color hex codes and color-names
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'purescript-contrib/purescript-vim'
Plug 'andys8/vim-elm-syntax' " until https://github.com/andys8/vim-elm-syntax/issues/9
Plug 'hashivim/vim-terraform'




Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': { -> coc#util#install()}}
Plug 'antoinemadec/coc-fzf', {'branch': 'release'}
let g:coc_fzf_preview = ''
let g:coc_fzf_opts = []

" Configuration for coc.nvim
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Some server have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

nmap <silent> <space>N :call CocAction('diagnosticPrev')<cr>
nmap <silent> <space>n :call CocAction('diagnosticNext')<cr>

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap for do codeAction of current line
nmap <leader>ac <Plug>(coc-codeaction)

" Remap for do action format
" nnoremap <silent> F :call CocAction('format')<CR>

" Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rr <Plug>(coc-rename)

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>C + "..."ocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources#use-tab-or-custom-key-for-trigger-completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" statusline
Plug 'itchyny/lightline.vim'
" Plug 'taohex/lightline-buffer'
Plug 'mgee/lightline-bufferline'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" colorschemes
Plug 'morhetz/gruvbox'
Plug 'fdietze/goodday.vim'
Plug 'drewtempelmeyer/palenight.vim'
" Italics for my favorite color scheme
let g:palenight_terminal_italics=1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" experimental
" Plug 'scrooloose/syntastic'
Plug 'vim-scripts/LanguageTool' " spell grammar checking
" Plug 'Raimondi/delimitMate' " automatically-close-brackets-magic
" Plug 'vim-scripts/ColorSchemeEditor' " graphical editor for colorschemes
Plug 'gerw/vim-HiLinkTrace' " identify highlighting group under cursor, useful when creating colorschemes
Plug 'jamessan/vim-gnupg'

" Collaborative Editing
" Plug 'FredKSchott/CoVim'
" Plug 'emgram769/vim-multiuser'
" TODO: , {'do': :UpdateRemotePlugins}
" Plug 'floobits/floobits-neovim' " https://floobits.com/help/plugins/nvim

" TODO: Plug 'nathanaelkane/vim-indent-guides'
" TODO: Plug 'ervandew/supertab'




call plug#end()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugin configuration

let g:scala_scaladoc_indent = 1 " enable indentation standard as recommended for Scaladoc comments (from http://docs.scala-lang.org/style/scaladoc.html, since Scaladoc2)

let g:colorizer_auto_filetype='css,html,dosini'

" fzf
let g:fzf_layout = {} " default to full screen

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()

" easytags
let g:easytags_cmd = "/usr/bin/ctags"
let g:easytags_auto_update = 1
let g:easytags_dynamic_files = 1
let g:easytags_by_filetype = "~/.vim/vimtags/"
let g:easytags_async = 1
let g:easytags_ignored_filetypes = ''
let g:easytags_updatetime_min = 30000
let g:easytags_languages = {
            \   'zsh': {
            \     'cmd': g:easytags_cmd,
            \       'args': ['--fields=+l', '--c-kinds=+p', '--c++-kinds=+p'],
            \       'fileoutput_opt': '-f',
            \       'stdout_opt': '-f-',
            \       'recurse_flag': '-R'
            \   }
            \}

" multiple-cursors
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" Goyo distraction free editing
let g:goyo_width = 80
let g:goyo_height = '100%'
let g:goyo_margin_top = 3
let g:goyo_margin_bottom = 3

" commentary
autocmd FileType sql setlocal commentstring=--\ %s
autocmd FileType cypher setlocal commentstring=//\ %s

" gitgutter and signify
let g:gitgutter_map_keys = 0 " no default mappings
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '⌇'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '-'
let g:gitgutter_sign_modified_removed = '⌇'
let g:gitgutter_diff_args = '-w' " ignore whitespace
autocmd BufWritePost * GitGutter

" Languagetool
let g:languagetool_jar=$HOME."/local/languagetool/languagetool-commandline.jar"

" Github flavoured markdown
let g:markdown_fenced_languages = ['scala', 'javascript', 'json', 'bash=sh', 'sql']

" Autoformat
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 1

let g:formatdef_scalariform ='"scalariform"'
let g:formatdef_scalafmt ='"ng-scalafmt --stdin"'
let g:formatters_scala = ['scalariform']

let g:formatdef_htmltidy ='"html-beautify -s 2"'
let g:formatdef_jsbeautify ='"js-beautify -s 2"'
let g:formatdef_jsonbeautify ='"underscore print --outfmt json"'
let g:formatters_html = ['htmltidy']
let g:formatters_javascript = ['jsbeautify']
let g:formatters_json = ['jsonbeautify']


" vim schlepp
let g:Schlepp#allowSquishingLines = 1
let g:Schlepp#allowSquishingBlocks = 1
let g:Schlepp#reindent = 1


" switch.vim
let g:switch_custom_definitions =
            \ [
            \   ['on', 'off'],
            \   ['==', '!='],
            \   ['_', '-'],
            \   [' < ', ' > '],
            \   ['<=', '>='],
            \   [' + ', ' - '],
            \   ['-=', '+='],
            \   ['and', 'or'],
            \   ['if', 'unless'],
            \   ['YES', 'NO'],
            \   ['yes', 'no'],
            \   ['first', 'last'],
            \   ['else', 'else if'],
            \   ['max', 'min'],
            \   ['px', '%', 'em'],
            \   ['left', 'right'],
            \   ['top', 'bottom'],
            \   ['margin', 'padding'],
            \   ['height', 'width'],
            \   ['absolute', 'relative'],
            \   ['horizontal', 'vertical'],
            \   ['show', 'hide'],
            \   ['visible', 'hidden'],
            \   ['add', 'remove'],
            \   ['up', 'down'],
            \   ['before', 'after'],
            \   ['slow', 'fast'],
            \   ['small', 'large'],
            \   ['even', 'odd'],
            \   ['inside', 'outside'],
            \   ['with', 'extends'],
            \   ['class', 'object', 'trait'],
            \   ['def', 'val'],
            \   {'"\([^"]*\)"': '''\1''', '''\([^'']*\)''': '"\1"'},
            \   {
            \     '\<\(\l\)\(\l\+\(\u\l\+\)\+\)\>': '\=toupper(submatch(1)) . submatch(2)',
            \     '\<\(\u\l\+\)\(\u\l\+\)\+\>': "\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))",
            \     '\<\(\l\+\)\(_\l\+\)\+\>': '\U\0',
            \     '\<\(\u\+\)\(_\u\+\)\+\>': "\\=tolower(substitute(submatch(0), '_', '-', 'g'))",
            \     '\<\(\l\+\)\(-\l\+\)\+\>': "\\=substitute(submatch(0), '-\\(\\l\\)', '\\u\\1', 'g')",
            \   }
            \ ]

" rooter
let g:rooter_manual_only = 1
let g:rooter_disable_map = 1

