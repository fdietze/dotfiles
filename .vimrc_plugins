" using plugin manager vim-plug
" auto-install if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  !mkdir -p ~/.vim/autoload
  !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')



" sensible default settings
Plug 'tpope/vim-sensible'

" statusline
Plug 'itchyny/lightline.vim'
Plug 'bling/vim-bufferline'

" Start screen with recently opened files
Plug 'mhinz/vim-startify'

" fuzzy autocompletion, eclim
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }

" restore cursor position and folds
" Plug 'vim-scripts/restore_view.vim'

" file browser
Plug 'scrooloose/nerdtree'

" enable dot-command for Plugins
Plug 'tpope/vim-repeat'

" distraction-free writing
Plug 'junegunn/goyo.vim'

" Toggle fullscreen for one window
Plug 'ZoomWin'

" redraw some intermediate steps when using PageUp/Down
Plug 'terryma/vim-smooth-scroll'

" enlarge focused window a bit
Plug 'roman/golden-ratio'

" draw a sublime like minimap
" Plug 'severin-lemaignan/vim-minimap'
" hardmode, disabling arrow keys
"Plugin 'wikitopian/hardmode'
"autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" Plugin 'kbarrette/mediummode'
" Plugin 'takac/vim-hardtime'
" let g:hardtime_allow_different_key = 1
" let g:hardtime_maxcount = 2

" Lots of filetypes
Plug 'sheerun/vim-polyglot'
Plug 'gre/play2vim'
Plug 'dag/vim-fish'
" Plugin 'gorodinskiy/vim-coloresque'
" TODO: https://github.com/msanders/snipmate.vim
" TODO: https://github.com/othree/html5.vim

" TODO: decompile java .class files on the fly
Plug 'vim-scripts/JavaDecompiler.vim'

" sublime-like multiple cursors
Plug 'terryma/vim-multiple-cursors'

" rainbow parentheses
"Plugin 'oblitum/rainbow'
"au FileType c,cpp,objc,objcpp call rainbow#load()
"let g:rainbow_active = 1

" show 'Match x of y' when searching
Plug 'henrik/vim-indexed-search'

" commenting
Plug 'tpope/vim-commentary'

" surround text with quotes, parantheses, ...
Plug 'tpope/vim-surround'

" align text
Plug 'godlygeek/tabular'
" TODO: Plugin 'junegunn/vim-easy-align'

" ctrl+A/X on dates and time
Plug 'tpope/vim-speeddating'

" unix commands
Plug 'tpope/vim-eunuch'

" automatically-close-brackets-magic
Plug 'Raimondi/delimitMate'

" most recently used files and dirs
Plug 'Shougo/neomru.vim'

" Interactive command execution
Plug 'Shougo/vimproc.vim'

" fuzzy file finding
Plug 'Shougo/unite.vim'
Plug 'wincent/command-t', { 'do': 'cd ruby/command-t; ruby extconf.rb; make'}


" git support
Plug 'tpope/vim-fugitive'
"Plugin 'gregsexton/gitv'
"Plugin 'airblade/vim-gitgutter'

" VCS change info on the left
Plug 'mhinz/vim-signify'

" Collaborative Editing
"Plugin 'FredKSchott/CoVim'
"Plugin 'emgram769/vim-multiuser'


" graphical editor for colorschemes
" Plug 'vim-scripts/ColorSchemeEditor'

" colorschemes
" Bundle 'godlygeek/csapprox'
" Bundle 'vim-scripts/guicolorscheme.vim'
" Bundle 'nanotech/jellybeans.vim'
Plug 'chriskempson/base16-vim'
" Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
" Bundle 'fdietze/goodday.vim'
" Plug 'tomasr/molokai'
" Plug 'sickill/vim-monokai'

" % matches not only parantheses, but also HTML-Tags and more
Plug 'edsono/vim-matchit'

" identify highlighting group under cursor
Plug 'gerw/vim-HiLinkTrace'

" TODO: Plugin 'nathanaelkane/vim-indent-guides'

Plug 'fidian/hexmode'

Plug 'vim-scripts/LanguageTool'



call plug#end()



" plugin configuration


" Colorschemes
let base16colorspace=256  " Access colors present in 256 colorspace
let g:rehash256 = 1 " molokai


" YouCompleteMe
let g:ycm_auto_trigger = 1
let g:ycm_min_num_of_chars_for_completion = 5

" dont display detail window about current completion
set completeopt=menuone,longest
" let g:ycm_autoclose_preview_window_after_insertion = 1


" Eclim
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimScalaSearchSingleResult = 'edit'
let g:EclimMakeLCD = 0


" restore-vim
set viewoptions=cursor,folds,slash,unix
" let g:skipview_files = ['*\.vim']


" DelimitMate
let delimitMate_expand_cr = 1
let delimitMate_balance_matchpairs = 1


" Unite
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#custom#source('file_rec', 'white_globs', ['*.scala','*.conf','*.js','*.sbt'])
call unite#custom#source('file_rec', 'ignore_globs', ['target/'])

" CommandT
let g:CommandTFileScanner = 'git'
" let g:CommandTCancelMap=['<Esc>', '<C-c>', '<Backspace>']


" Use ag for search
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'
endif


" Signify
let g:signify_sign_add               = '+'
let g:signify_sign_change            = '⌇' " '︴⌇⌇┇
let g:signify_sign_delete            = '✕'
let g:signify_sign_delete_first_line = '⌅'


" Languagetool
let g:languagetool_jar=$HOME."/local/LanguageTool-2.6/languagetool-commandline.jar"

