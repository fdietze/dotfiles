let mapleader="\<space>"
let g:mapleader="\<space>"

" Toggles are mapped to <leader>t<something>

" In NEO keyboard Layout (http://neo-layout.org/) we can remap hjkl,
" because there are arrow keys in the middle of the keyboard already.
" Additionally we have: üöäß

" h: Highlight current word, selection, autohighlight
nnoremap <silent> <expr> h HighlightCurrentWord()
vnoremap <silent> h :<C-U>call HighlightSelection()<CR>:set hlsearch<CR>
" toggle automatic highlighting on/off.
nnoremap <Leader>th :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>

" j: jump to mark
nnoremap j `

" k: (notehing yet)

" l: next buffer
nnoremap <silent> l :bnext<CR>
vnoremap <silent> l :bnext<CR>
nnoremap <silent> L :bprev<CR>
vnoremap <silent> L :bprev<CR>

nnoremap ö :update<CR>
nnoremap ä :q<CR>
nnoremap ü :bd<CR>

" ß: replay q macro
nnoremap ß @q

" Smart way to move between windows, adjusted for NEO
" in insert mode
imap ∫ <C-o><C-W>h
imap ∀ <C-o><C-W>j
imap Λ <C-o><C-W>k
imap ∃ <C-o><C-W>l
" in other modes
map ∫ <C-W>h
map ∀ <C-W>j
map Λ <C-W>k
map ∃ <C-W>l

" Smart way to move between tabs, adjusted for NEO
" in insert mode
" imap √ <C-o>:tabprev<cr>
" imap ℂ <C-o>:tabnext<cr>
" in other modes
" map √ :tabprev<cr>
" map ℂ :tabnext<cr>




" TODO: remap Q (ex-mode)
" TODO: imap <C-r>+ <C-o>"+p

" make Y behave like D and C, yanking till end of line
map Y y$

" don't lose selection when indenting
vnoremap < <gv
vnoremap > >gv

" fast way to edit ~/.vimrc*
nnoremap <Leader>vv :e ~/.vimrc<CR>
nnoremap <Leader>vp :e ~/.vimrc_plugins<CR>
nnoremap <Leader>vk :e ~/.vimrc_keybindings<CR>
nnoremap <Leader>vs :e ~/.vimrc_statusline<CR>
nnoremap <Leader>vc :e ~/.vimrc_custom<CR>
nnoremap <Leader>vr :source ~/.vimrc<CR>

" disable arrow keys and home/end in insert mode, exit insert mode when pressed
" inoremap  <Up>     <Esc><Up>
" inoremap  <Down>   <Esc><Down>
inoremap  <Left>   <Esc>
inoremap  <Right>  <Esc>2<Right>
imap  <Home>   <Esc><Home>
imap  <End>    <Esc><End>

" smart home
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>

" Switch buffers with tab
" nnoremap <silent> <Tab> :bnext<CR>
" nnoremap <silent> <S-Tab> :bprevious<CR>
" vnoremap <silent> <Tab> :bnext<CR>
" vnoremap <silent> <S-Tab> :bprevious<CR>

" jump to tag (for example in help files)
nnoremap <leader>j <C-]>

" toggle local spell checking
nnoremap <leader>ts :setlocal spell! spell?<CR>
" insert best suggestion for last misspelled word
inoremap <c-s> <c-g>u<Esc>[s1z=`]a<c-g>u
nnoremap <c-s> 1z=

" insert semicolon at end of line
nnoremap <leader>; m`A;<esc>``

" insert empty lines on NEO up/down arrow
nmap <silent> <leader>l <Plug>unimpairedBlankUp
nmap <silent> <leader>a <Plug>unimpairedBlankDown
nmap <silent> <leader>dl m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nmap <silent> <leader>da m`:silent +g/\m^\s*$/d<CR>``:noh<CR>

" Autoformat
nmap <leader>f :Autoformat<CR>

" Unite / Fuzzy file finding
" nnoremap <Leader>e :<C-u>Unite -no-split -start-insert file_rec<CR>
" nnoremap <Leader>a :<C-u>Unite -no-split -start-insert buffer tab file_mru<CR>
" nnoremap <Leader>e :<C-u>CommandT<CR>
nmap <leader>e :CtrlP<CR>

" clear search highlighting
nnoremap <silent> <Leader><Leader> :nohlsearch<CR>
" nnoremap <Esc> :nohlsearch<CR><Esc>

" toggle distraction free writing
nnoremap <silent> <leader>tg :Goyo<CR>

" Toggle fullscreen for current window (Plugin ZoomWin)
noremap <silent> <leader>tf :ZoomWin<CR>

" smooth scrolling (Plugin vim-smooth-scroll)
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
noremap <silent> <PageUp> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <PageDown> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" ExpandRegion
map + <Plug>(expand_region_expand)
map - <Plug>(expand_region_shrink)

" incsearch plugin
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)

