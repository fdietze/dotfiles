let mapleader="\<space>"
let g:mapleader="\<space>"

" Toggles are mapped to <leader>t<something>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NEO Keyboard Layout (http://neo-layout.org/)

" In NEO we can remap hjkl, because there are arrow keys in the middle of the
" keyboard already.
" Additionally we have: üöäß

" h: Highlight current word, selection, autohighlight
nnoremap <silent> <expr> h HighlightCurrentWord()
vnoremap <silent> h :<C-U>call HighlightSelection()<CR>:set hlsearch<CR>
" toggle automatic highlighting on/off.
nnoremap <Leader>th :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>

" j: jump to mark
" nnoremap j `
" vnoremap j `
" jump to tag (for example in help files)
" nnoremap <leader>j <C-]>

" k: (nothing yet)
nnoremap K zg  " add current word to spellfile
vnoremap k <Nop>
nnoremap k 1z= " insert best suggestion misspelled word
nnoremap <C-h> ]s " next misspelled word
nnoremap <C-k> [s " prev misspelled word

" l/L: next/prev buffer
" L was: place cursor at bottom of screen
nnoremap <silent> l :bnext<CR>
vnoremap <silent> l :bnext<CR>
nnoremap <silent> L :bprev<CR>
vnoremap <silent> L :bprev<CR>

" efficient one-button save/close bindings
nnoremap ö :update<CR>
vnoremap ö <esc>:update<CR>gv
nnoremap Ö :w suda://%<CR>:checktime<CR>
vnoremap Ö <esc>:w suda://%<CR>gv:checktime<CR>
nnoremap <Leader>ö :update<CR>
nnoremap ä :q<CR>
vnoremap ä <esc>:q<CR>
" nnoremap Ä :q!<CR>
" vnoremap Ä <esc>:q!<CR>
nnoremap ü :bd<CR>
vnoremap ü <esc>:bd<CR>
" nnoremap Ü :bd!<CR>
" vnoremap Ü <esc>:bd!<CR>
nnoremap <Leader>ü :BufOnly<CR>
vnoremap <Leader>ü <esc>:BufOnly<CR>gv

" replay q/f macro
" ß is on the right side next to q
" Q was ex mode
nnoremap ß @q
vnoremap ß @q
nnoremap Q @f
vnoremap Q @f

" Smart way to move between windows, adjusted for NEO
" in insert mode
imap ∫ <C-o><C-W>h
imap ∀ <C-o><C-W>j
imap Λ <C-o><C-W>k
imap ∃ <C-o><C-W>l
" in other modes
map ∫ <C-W>h
map ∀ <C-W>j
map Λ <C-W>k
map ∃ <C-W>l

" Smart way to move between tabs, adjusted for NEO
" in insert mode
" imap √ <C-o>:tabprev<cr>
" imap ℂ <C-o>:tabnext<cr>
" in other modes
" map √ :tabprev<cr>
" map ℂ :tabnext<cr>




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fix some vim annoyances

" TODO: imap <C-r>+ <C-o>"+p

" make Y behave like D and C, yanking till end of line
map Y y$

" don't overwrite register when pasting over selection
vnoremap p pgvy

" paste over rest of line
nnoremap <Leader>p v$<Left>pgvy
" TODO: paste over text objects

" don't lose selection when indenting
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv


" Smart Home:
" https://vi.stackexchange.com/a/23206
noremap  <expr> <Home> col('.') == match(getline('.'), '\S') + 1 ? "\<Home>" : "^"
inoremap <expr> <Home> col('.') == match(getline('.'), '\S') + 1 ? "\<Home>" : "\<C-O>^"


" remap unused vim commands
nnoremap go <C-o>  " original: jump to the n-th byte in the file
nnoremap gi <C-i>  " original: insert mode at the last insert position



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" custom bindings


" fast way to edit ~/.vimrc*, reload, install plugins
nnoremap <Leader>vv :e ~/.vimrc<CR>
nnoremap <Leader>vp :e ~/.vimrc_plugins<CR>
nnoremap <Leader>vpi :source ~/.vimrc_plugins<CR>:PlugInstall<CR>:source ~/.vimrc_plugins<CR>
nnoremap <Leader>vk :e ~/.vimrc_keybindings<CR>
nnoremap <Leader>vkr :source ~/.vimrc_keybindings<CR>
nnoremap <Leader>vs :e ~/.vimrc_statusline<CR>
nnoremap <Leader>vc :e ~/.vimrc_custom<CR>
nnoremap <Leader>vr :source ~/.vimrc<CR>
nnoremap <Leader>vz :e ~/.zshrc<CR>
nnoremap <Leader>va :e ~/.sh_aliases<CR>

" clear search highlighting
nnoremap <silent> <Leader><Leader> :nohlsearch<CR>
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" error navigation
nmap <silent> <space>N :call CocAction('diagnosticPrevious')<cr>
nmap <silent> <space>n :call CocAction('diagnosticNext')<cr>

" toggle local spell checking
nnoremap <leader>ts :setlocal spell! spell?<CR>
" insert best suggestion for last misspelled word
inoremap <c-s> <c-g>u<Esc>[s1z=`]a<c-g>u
nnoremap <c-s> 1z=

" toggle chars at end of line
nmap <silent> <Leader>; <Plug>ToggleEndChar;
nmap <silent> <Leader>, <Plug>ToggleEndChar,
nmap <silent> <Leader>. <Plug>ToggleEndChar.
nmap <silent> <Leader>: <Plug>ToggleEndChar:


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" https://github.com/neoclide/coc.nvim#example-vim-configuration
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"
" github copilot
imap <silent><script><expr> <C-n> copilot#Next()

" multiple cursors
" TODO: highlight all matches before starting multiple-cursors
" nmap <C-n> :call HighlightCurrentWord()<CR>:!redraw<CR>:call multiple_cursors#new("n",1)<CR>
nnoremap <silent> <leader><c-n> :MultipleCursorsFind <C-R>/<CR>
vnoremap <silent> <leader><c-n> :MultipleCursorsFind <C-R>/<CR>

" FZF: Fuzzy file finding
nmap <leader>e :ProjectFiles<CR>
nmap <leader>E :GitFiles<CR>
nmap <leader>b :Buffers<CR>
nmap <leader>m :GitFiles?<CR>
nmap <leader>r :History<CR>
nmap <silent> <leader>vd :call fzf#run({'source': 'GIT_DIR=$HOME/projects/dotfiles GIT_WORK_TREE=$HOME git -c status.showUntrackedFiles=no -c core.excludesfile=$HOME/.gitignore-dotfiles ls-tree --full-tree --name-only -r HEAD', 'sink': 'e', 'dir': '$HOME'})<CR>
nmap <leader>a :Rooter<CR>:RG<CR>
nmap <leader>A :Rooter<CR>:RG<space><c-r><c-w><CR>
" johannes
nmap <leader>s :Rooter<CR>:RG<space>  

" Git
nmap <leader>gn :GitGutterNextHunk<cr>
nmap <leader>gN :GitGutterPrevHunk<cr>
nmap <leader>gu :GitGutterStageHunk<cr>
nmap <leader>gr :GitGutterUndoHunk<cr>

" surround with S
nmap S ys

if has('nvim')
    nmap <leader>gs :nohlsearch<CR>:term tig status<CR>i
else
    nmap <leader>gs :nohlsearch<CR>:silent !tig status<CR>:GitGutter(All)<CR>:redraw!<CR>
endif

:tnoremap <C-Esc> <C-\><C-n>

" Emmet
" nmap <C-e> <Plug>(emmet-expand-abbr)
" imap <C-e> <Plug>(emmet-expand-abbr)

" UndoTree
nnoremap <leader>tu :UndotreeToggle<CR>

" LatexBox
vmap <Leader>le <Plug>LatexWrapSelection
vmap <buffer>lo <Plug>LatexEnvWrapSelection

" Autoformat
" nmap <leader>f :Autoformat<CR>
nmap <leader>f <Plug>(coc-format)

" toggle distraction free writing
nnoremap <silent> <leader>tg :Goyo<CR>

" smooth scrolling (Plugin vim-smooth-scroll)
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
noremap <silent> <PageUp> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <PageDown> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" vim-schlepp visual movement
vmap <S-up>    <Plug>SchleppUp
vmap <S-down>  <Plug>SchleppDown
vmap <S-left>  <Plug>SchleppLeft
vmap <S-right> <Plug>SchleppRight
nmap <S-up>    <S-v><Plug>SchleppUp
nmap <S-down>  <S-v><Plug>SchleppDown
nmap <S-left>  <S-v><Plug>SchleppLeft
nmap <S-right> <S-v><Plug>SchleppRight
