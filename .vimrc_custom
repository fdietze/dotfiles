" highlight current word
let g:highlighting = 0
function! HighlightCurrentWord()
    if g:highlighting == 1 && @/ =~ '^\\C\\<'.expand('<cword>').'\\>$'
        let g:highlighting = 0
        return ":silent nohlsearch\<CR>"
    endif
    let @/ = '\C\<'.expand('<cword>').'\>'
    let g:highlighting = 1
    return ":silent set hlsearch\<CR>"
endfunction

" highlight visually selected text
function! HighlightSelection()
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  normal! gvy
  if @@ =~? '^[0-9a-z,_]*$' || @@ =~? '^[0-9a-z ,_]*$' && g:highlighting
    let @/ = @@
  else
    let pat = escape(@@, a:cmd.'\')
    if g:highlighting
      let pat = substitute(pat, '\n', '\\n', 'g')
    else
      let pat = substitute(pat, '^\_s\+', '\\s\\+', '')
      let pat = substitute(pat, '\_s\+$', '\\s\\*', '')
      let pat = substitute(pat, '\_s\+', '\\_s\\+', 'g')
    endif
    let @/ = '\V'.pat
  endif
  normal! gV
  call setreg('"', old_reg, old_regtype)
  let g:highlighting = 1
endfunction

" Highlight all instances of word under cursor when idle
function! AutoHighlightToggle()
    let @/ = ''
    if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
    else
        augroup auto_highlight
            au!
            au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup END
        setl updatetime=200
        echo 'Highlight current word: ON'
        return 1
    endif
endfunction


" from: http://stackoverflow.com/questions/18157501/toggle-semicolon-or-other-character-at-end-of-line
function! s:ToggleEndChar(charToMatch)
    let save_cursor = getpos(".") " backup cursor
    s/\v(.)$/\=submatch(1)==a:charToMatch ? '' : submatch(1).a:charToMatch
    call setpos('.', save_cursor) " restore cursor
    silent! call repeat#set("\<Plug>ToggleEndChar".a:charToMatch, -1)
endfunction

command! -nargs=* ToggleEndChar call s:ToggleEndChar('<args>')

noremap <Plug>ToggleEndChar; :ToggleEndChar ;<CR>
noremap <Plug>ToggleEndChar, :ToggleEndChar ,<CR>
noremap <Plug>ToggleEndChar. :ToggleEndChar .<CR>
noremap <Plug>ToggleEndChar: :ToggleEndChar :<CR>

command! Johannes :call Johannes()
function! Johannes()
    nmap h <Left>
    nmap j <Down>
    nmap k <Up>
    nmap l <Right>
    vmap h <Left>
    vmap j <Down>
    vmap k <Up>
    vmap l <Right>
    nmap <Enter> :bnext<CR>
    nmap <Backspace> :bprev<CR>
    nmap Q :bdel<CR>
endfunction
